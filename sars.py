# -*- coding: utf-8 -*-
"""SARS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17jxSbLxPsqAuwzK9gre9rd5WcENN64mQ
"""

!pip install Bio

import os
from Bio import SeqIO
from collections import Counter
from itertools import combinations
import numpy as np
from scipy.stats import linregress
import matplotlib.pyplot as plt
import pandas as pd
import scipy.stats

!unzip SARS-COV-2.zip

!rm -r SARS-COV-2.zip

!mv SARS-COV-2/* .

!ls -a  # List all files (including hidden ones)
!ls -R "SARS-COV-2" #confirm if i have all files.

!rm -r SARS-COV-2/
#Delete the zip file and the extracted folder.
#!rm -r SARS-COV-2.zip
#!rm -r SARS-COV-2/
# Files to delete
target_files = ['reads.txt', 'sequences.csv', 'source.txt']

# Show files before deletion
print("Files found before deletion:")
!ls -l reads.txt sequences.csv source.txt 2>/dev/null || echo "No matching files found"

# Delete files unconditionally
print("\nPerforming deletion...")
for file in target_files:
    if os.path.exists(file):
        !rm -v "{file}"  # -v shows which files were deleted
    else:
        print(f"{file} not found (skipping)")

# Verify deletion
print("\nFiles remaining after deletion:")
!ls -l reads.txt sequences.csv source.txt 2>/dev/null || echo "All target files removed"

from Bio import SeqIO
from collections import Counter
from itertools import combinations
import numpy as np
from scipy.stats import linregress
import pandas as pd
import matplotlib.pyplot as plt
import os

# --------------------------
# ESSENTIAL PART 1: Data Loading
# Assignment Expectation: Load 4 SARS-CoV-2 chromosome FASTA files
# --------------------------
def load_fasta_sequence(filepath):
    """Load and validate FASTA file, returning uppercase sequence.
    Requirement: Handle FASTA format and ensure case consistency."""
    record = next(SeqIO.parse(filepath, "fasta"))
    seq = str(record.seq).upper()

    # Validate nucleotide characters (critical for accurate k-mer analysis)
    invalid_chars = set(seq) - {'A', 'T', 'C', 'G'}
    if invalid_chars:
        print(f"Warning: {filepath} contains non-ACGT characters: {invalid_chars}")
    return seq

# --------------------------
# ESSENTIAL PART 2: k-mer Processing
# Assignment Expectation: Calculate k-mers (k=3 to k=7) and their ranks
# --------------------------
def count_kmers(sequence, k=3):
    """Generate k-mers using sliding window and count frequencies.
       Requirement: Extract all possible k-mers of given length."""
    return Counter([sequence[i:i+k] for i in range(len(sequence)-k+1)])

def get_ranked_kmers(kmer_counts):
    """Rank k-mers by frequency (highest to lowest) with proper tie-breaking.
     Requirement: Create comparable rank orders for IBSI calculation."""
    # Secondary sort by k-mer text ensures consistent tie handling
    sorted_kmers = sorted(kmer_counts.items(), key=lambda x: (-x[1], x[0]))
    return {kmer: rank for rank, (kmer, _) in enumerate(sorted_kmers, 1)}

# --------------------------
# ESSENTIAL PART 3: IBSI Calculation
# Assignment Expectation: Implement IBSI via rank correlation (R²)
# --------------------------
def calculate_rank_ibsi(ranks1, ranks2):
    """Calculate IBSI approximation using rank correlation (R²).
    Requirement: Quantify similarity between two genomes' k-mer distributions."""
    common_kmers = set(ranks1.keys()) & set(ranks2.keys())
    x = np.array([ranks1[k] for k in common_kmers])
    y = np.array([ranks2[k] for k in common_kmers])
    return linregress(x, y).rvalue**2

# --------------------------
# ESSENTIAL PART 4: Visualization
# Assignment Expectation: Generate 2D comparison plots with k-mer labels
# --------------------------
def plot_ibsi_comparison(ranks1, ranks2, label1, label2, k):
    """Create 2D rank comparison plot with k-mer annotations.
     Requirement: Visualize pairwise genome similarity with R² value."""
    common_kmers = set(ranks1.keys()) & set(ranks2.keys())
    x = [ranks1[k] for k in common_kmers]
    y = [ranks2[k] for k in common_kmers]

    plt.figure(figsize=(20, 10))

    # Dynamically adjust font size based on number of k-mers
    fontsize = max(6, 12 - len(common_kmers)//100)

    # Plot each k-mer with frequency information
    for kmer in common_kmers:
        plt.text(ranks1[kmer], ranks2[kmer], kmer,
                fontsize=fontsize, ha='center', va='center',
                color='blue', alpha=0.7)

    # Add diagonal reference line
    max_rank = max(max(x), max(y))
    plt.plot([0, max_rank], [0, max_rank], 'r--', alpha=0.3)

    # Calculate and display R²
    r2 = calculate_rank_ibsi(ranks1, ranks2)
    plt.title(f"IBSI (Rank Correlation) k={k}: {label1} vs {label2}\nR² = {r2:.4f}", pad=20)
    plt.xlabel(f"{label1} k-mer Rank", labelpad=10)
    plt.ylabel(f"{label2} k-mer Rank", labelpad=10)
    plt.grid(True, alpha=0.2)
    plt.xlim(0, max_rank+5)
    plt.ylim(0, max_rank+5)
    plt.show()

    return r2

# --------------------------
# ESSENTIAL PART 5: Analysis Workflow
# Assignment Expectation: Compare all chromosome pairs for k=3-7
# --------------------------
def run_ibsi_analysis(fasta_files, k_start=3, k_end=7):
    """Main analysis pipeline generating all required outputs.
    Requirement: Process all files, calculate IBSI, and generate plots+table."""
    # Load and validate genomes
    chromosomes = {}
    print("=== Loaded Genomes ===")
    for filepath in fasta_files:
        name = os.path.splitext(os.path.basename(filepath))[0]
        chromosomes[name] = load_fasta_sequence(filepath)
        print(f"{name}: {len(chromosomes[name]):,} bp")

    # Process all k values and pairs
    results = []
    for k in range(k_start, k_end + 1):
        print(f"\n=== Analyzing k={k} ===")

        # Calculate k-mer ranks for all genomes
        rank_data = {}
        for name, seq in chromosomes.items():
            counts = count_kmers(seq, k=k)
            rank_data[name] = get_ranked_kmers(counts)

        # Compare all unique pairs
        for (name1, ranks1), (name2, ranks2) in combinations(rank_data.items(), 2):
            print(f"\nComparing {name1} vs {name2}:")
            r2 = plot_ibsi_comparison(ranks1, ranks2, name1, name2, k)
            results.append({
                'k': k,
                'Genome 1': name1,
                'Genome 2': name2,
                'R² (IBSI)': r2,
                'Common kmers': len(set(ranks1.keys()) & set(ranks2.keys()))
            })

    return pd.DataFrame(results)

# --------------------------
# ESSENTIAL PART 6: Execution & Reporting
# Expectation: Clear output of all results
# --------------------------
if __name__ == "__main__":
    # Define input files (replace with your actual paths)
    fasta_files = [
        "/content/LC546038.fasta",
        "/content/MT358643.fasta",
        "/content/MT476385.fasta",
        "/content/NC_045512.fasta"
    ]

    # Verify files exist
    print("=== File Verification ===")
    for file in fasta_files:
        if not os.path.exists(file):
            raise FileNotFoundError(f"Missing required file: {file}")
        print(f"✓ {file}")

    # Run full analysis
    print("\n=== Starting IBSI Analysis ===")
    results_df = run_ibsi_analysis(fasta_files, k_start=3, k_end=7)

    # Format final results
    print("\n=== Final Results ===")
    pd.set_option('display.float_format', lambda x: f"{x:.6f}")
    print(results_df.to_string(index=False))

    # Save comprehensive output
    results_df.to_csv("ibsi_analysis_results.csv", index=False)
    print("\n=== Analysis Complete ===")
    print("Results saved to 'ibsi_analysis_results.csv'")